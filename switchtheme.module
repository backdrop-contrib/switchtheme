<?php
// $Id$
/**
 * Adds a block with a user theme switcher
 */
 
/**
* Implementation of hook_help().
*/
function switchtheme_help($section) {
  $output = '';
  switch ($section) {
    case 'admin/modules#description':
      $output .= t('Creates a switch theme block to allow users to switch themes on the fly. The block can be enabled by role and the admin can define labels to use for each available theme.');
      break;
  }
  return $output;
}

/**
* Implementation of hook_perm().
*/
function switchtheme_perm() {
  return array('administer switch', 'switch theme');
}

/**
 *  Implementation of hook_menu()
 */
function switchtheme_menu($may_cache) {
  global $custom_theme, $user;

  // plays nice with others, if $custom_theme has already been defined, use it
  // otherwise if session info is set use that
  if ($_GET['theme']) {
    $form_values = array('custom_theme' => $_GET['theme']);
    switchtheme_block_form_submit('', $form_values);
  }
  if (isset($_SESSION['custom_theme']) && !isset($custom_theme)) {
    $custom_theme = $_SESSION['custom_theme'];
  }
  
  if ($may_cache) {
    $items[] = array(
      'path'     => 'admin/settings/switchtheme',
      'callback' => 'switchtheme_settings',
      'title'    => t('Switch Theme Settings'),
      'access'   => user_access('administer switch'),
      'type'     => MENU_NORMAL_ITEM,
    );
  }
  
}

/**
 *  Implementation of hook_settings() 
 */
function switchtheme_settings() {
  
  $options = switchtheme_options();
  $form = array(
    '#type' => 'fieldset',
    '#description' => t('Set a label for each enabled theme. This is what will be displayed to the user in the selection box.'),
    );
  foreach ($options as $option) {
    $form['switchtheme_'. $option] = array(
      '#type' => 'textfield',
      '#title' => $option,
      '#default_value' => variable_get('switchtheme_'. $option, $option),
      );
  }
  return $form;
  return system_settings_form('switchtheme_settings', $form);

}

/**
 *  Implementation of hook_block()
 */
function switchtheme_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('Switch theme form');
    $blocks[1]['info'] = t('Random theme');
    return $blocks;
  }
  elseif ($delta == 0 && $op == 'view' && user_access('switch theme')) {
    $block['content'] = switchtheme_box();
    $block['subject'] = t('Theme');
    return $block;
  }
  elseif ($delta == 1 && $op == 'view' && user_access('switch theme')) {
    $block['subject'] = t('Random theme');
    $block['content'] = switchtheme_display_random_block();
    return $block;
  }
}

/**
 *  The random theme switch block is from Ber's theme garden (theme.drupal.org)
 */
function switchtheme_display_random_block() {
  $themes = list_themes();
  shuffle($themes);
  foreach ($themes as $key => $theme) {
    $theme->screenshot = dirname($theme->filename) . '/screenshot.png';
    if (file_exists($theme->screenshot)) { //return the first one with a screenie
      $output = l("<img src=\"$theme->screenshot\" alt=\"preview of $theme->name\"/>", $_GET['q'], NULL, 'theme='.$theme->name, NULL, FALSE, TRUE);
      return $output;
    }
  }
}


/**
 * Create a switch theme selection form
 */
function switchtheme_box() {
  global $user, $custom_theme;
  $form['custom_theme'] = array(
    '#type' => 'select',
    '#default_value' => !empty($custom_theme) ? $custom_theme : $user->theme,
    '#attributes' => array('title' => t('Change the way this site looks.')),
    '#options' => switchtheme_select(),
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Switch'));
  return drupal_get_form('switchtheme_block_form', $form);
}

/**
 * Theme the block search form.
 */
function theme_switchtheme_block_form($form) {
  return '<div class="container-inline">'. form_render($form) .'</div>';
}

/**
 * Process a block switchtheme form submission.
 */
function switchtheme_block_form_submit($form_id, $form_values) {
  global $user;
  
  // save the setting in the db for logged in users
  // save the setting in the session for all others
  if ($user->uid > 0) {
    if (user_save($user, array('theme' => $form_values['custom_theme']))) {
      $user->theme = $form_values['custom_theme'];
      unset($_SESSION['custom_theme']);
    } else {
      $_SESSION['custom_theme'] = $form_values['custom_theme'];
    }
  } else {
    $_SESSION['custom_theme'] = $form_values['custom_theme'];
  }
}


/**
 *  Create an array of enabled themes to select from
 * 
 *  TODO - probably should come back here and cache the theme list
 */
function switchtheme_options() {
  $options = array();
  $themes = list_themes();
  foreach ($themes as $name => $attr) {
    if ($attr->status) {
      $options[] = $attr->name;
    }
  }
  return $options;
}

/**
 *  Create a select list of themes and labels
 */
function switchtheme_select() {
 
  $select  = array();
  $options = switchtheme_options();
  
  foreach ($options as $option) {
    $select[$option] = variable_get('switchtheme_'. $option, $option);
  }
  asort($select);
  return $select;
}
